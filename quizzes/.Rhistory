library(XMl)
install.packages(XML)
install.packages(XML)
install.packages("XML")
library(XMl)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
XML?
;
rootNode[1]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
scores
doc
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-orioles"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
doc
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
scores <- xpathSApply(doc, "//div[@class='score']", xmlValue)
scores
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-orioles"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//div[@class='score']", xmlValue)
scores
scores <- xpathSApply(doc, '//div[@class="score"]', xmlValue)
scores
scores <- xpathSApply(doc, '//div[@class="score"]', xmlValue)
teams <- xpathSApply(doc, '//li[@class="team-name"]', xmlValue)
scores
teams
doc
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
names(jsonData$owner$login)
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
install.packages(data.table)
install.packages(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
DF = data.frame(x=rnorm(9), y = rep((c("a", "b", "c"), each = 3), z = rnorm(9))))
DF = data.frame(x=rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
DF
names(DF)
head(DF)
head(DF, 3)
DT + data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
DT = data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
head(DT, 3)
tables()
DT[2,]
DT[DT$y="a",]
DT[2,]
DT[DT$y="a",]
DT[DT$y=="a",]
DT[c(2,3)]
DT[, c(2,3)]
DT[, list(mean(x), sum(z))]
DT[, table(y)]
DT[, w:=z^2]
DT
DT[, m:= {tmp <- (x + z); log2(tmp + 5)}]
DT
DT[, a := x > 0]
DT
DT[, b := mean(x + w), by = a]
DT
.N
set.seed(123)
DT <- data.table(x = sample(letters[1:3], 1E5, TRUE))
DT[, .N, by = x]
DT <- data.table(x = rep(c("a", "b", "c"), each = 100), y = rnorm(300))
setkey(DT, x)
DT['a']
DT1 <- data.table(x = c('a', 'a', 'b', 'dt1'), y = 1:4)
DT2 <- data.table(x = c('a', 'a', 'b', 'dt1'), z = 5:7)
DT2 <- data.table(x = c('a', 'b', 'dt2'), z = 5:7)
setkey(DT1, x)
setkey(DT2, x)
merge(DT1, DT2)
DT1
DT2
big_df <- data.frame(x=rnorm(1E6), y = rnorm(1E6))
big_df <- data.frame(x=rnorm(1E6), y = rnorm(1E6))
file <- tempfile()
write.table(big_df, file = file, row.names = FALSE, col.names=TRUE, sep="\t", quote=FALSE)
system.time(fread(file))
system.time(read.table(file, header=TRUE, sep="\t"))
setwd("/Users/jumar/workspace/courses/getting-and-cleaning-data/quizzes/")
community_survey_data <- read.csv('getdata-data-ss06hid.csv')
head(community_survey_data)
head(community_survey_data$val)
head(community_survey_data$VAL)
community_survey_data$VAL = 24
community_survey_data$VAL = 23
community_survey_data]community_survey_data$VAL = 24]
community_survey_data]community_survey_data$VAL = 24]
community_survey_data]community_survey_data$VAL == 24]
community_survey_data[community_survey_data$VAL == 24]
head(community_survey_data[community_survey_data$VAL == 24])
community_survey_data$VAL == 24
community_survey_data$VAL == 1
head(community_survey_data$VAL)
community_survey_data$VAL == 23
setwd("/Users/jumar/workspace/courses/getting-and-cleaning-data/quizzes/")
community_survey_data <- read.csv('getdata-data-ss06hid.csv')
head(community_survey_data)
head(community_survey_data, 1)
community_survey_data$VAL == 23
community_survey_data[community_survey_data$VAL == 23,]
count(community_survey_data[community_survey_data$VAL == 23,])
?
nrow(community_survey_data[community_survey_data$VAL == 23,])
community_survey_data$VAL == 23
nrow(community_survey_data)
nrow(community_survey_data[community_survey_data$VAL == 23,])
nrow(community_survey_data[community_survey_data$VAL == 24,])
nrow(community_survey_data[community_survey_data$VAL == 1,])
nrow(community_survey_data)
nrow(community_survey_data[community_survey_data$VAL == 15,])
nrow(community_survey_data[community_survey_data$VAL == 24,])
(community_survey_data$VAL)
(community_survey_data$VAL = 24)
community_survey_data$VAL = 24
community_survey_data[community_survey_data$VAL = 24]
community_survey_data[community_survey_data$VAL = 24, ]
community_survey_data[community_survey_data$VAL =- 24, ]
community_survey_data[community_survey_data$VAL == 24, ]
community_survey_data[community_survey_data$VAL == 24, ]
nrow(community_survey_data[community_survey_data$VAL == 24, ])
nrow(community_survey_data)
nrow(community_survey_data[community_survey_data$VAL == 24, community_survey_data$VAL])
community_survey_data[community_survey_data$VAL == 24, community_survey_data$VAL]
community_survey_data$VAL
community_survey_data <- read.csv('getdata-data-ss06hid.csv')
community_survey_data$VAL
community_survey_data[community_survey_data$VAL == 24, ]
nrow(community_survey_data[community_survey_data$VAL == 24, ])
community_survey_data$VAL
community_survey_data$VAL == 24
community_survey_data[community_survey_data$VAL == 24, ]
community_survey_data[community_survey_data$VAL == 24, ]
head(community_survey_data[community_survey_data$VAL == 24, ])
head(community_survey_data[community_survey_data$VAL == 1, ])
subset(community_survey_data, VAL = 24)
nrow(subset(community_survey_data, VAL = 24))
community_survey_data$VAL == 24
community_survey_data <- read.csv('getdata-data-ss06hid.csv')
nrow(subset(community_survey_data, VAL == 24))
library(xlsx)
dat <- read.xlsx('getdata-data-DATA.gov_NGAP.xlsx')
dat <- read.xlsx('getdata-data-DATA.gov_NGAP.xlsx', sheetIndex = 1)
head(dat)
head(dat, 1)
dat <- read.xlsx('getdata-data-DATA.gov_NGAP.xlsx', sheetIndex = 1, header = TRUE)
head(dat, 1)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
restaurants <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal = TRUE)
restaurants <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml')
restaurants <- xmlTreeParse('getdata-data-restaurants.xml', useInternal = TRUE)
rootNode <- xmlRoot(restaurants)
rootNode
names(rootNode)
names(rootNode[1])
names(rootNode[1][1])
names(rootNode[[1][1]])
names(rootNode[[1]])
names(rootNode[1])
rootNode[1]
rootNode[1][0]
rootNode[1]
xpathSApply(restaurants, '//zipcode')
xpathSApply(restaurants, '//zipcode=21231')
xpathSApply(restaurants, '//zipcode[text() = "21231"])
xpathSApply(restaurants, '//zipcode[text() = "21231"]')
xpathSApply(restaurants, '//zipcode[text() = "21231"]')
idaho_community_data <- read.csv('getdata-data-ss06pid.csv')
idaho_community_data <- fread('getdata-data-ss06pid.csv')
library(data.table)
idaho_community_data <- fread('getdata-data-ss06pid.csv')
head(idaho_community_data)
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
DT <- fread('getdata-data-ss06pid.csv')
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
